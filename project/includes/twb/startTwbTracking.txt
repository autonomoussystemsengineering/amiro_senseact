====== TWB Tracking ======

The TWB tracking consists of 4 cameras, which are tracking markers. The merged positions are given via RSB.

In the following chapters the usage is descriped. For an example, please have a look into the [[tools:robotTools:twbTrackingCheck:start|twbTrackingCheck tool]].

===== Incomming and Return Values =====

The incomming value of the tracking tool via RSB is ''ObjectList''. Its defined in the ''loc.proto'' in the [[includes:types:start|types folder]].

The return value of the tracking function is the ''TrackingObject'', which contains the marker ID as an Integer and the position as ''TrackingPos''. ''TrackingPos'' includes the three float values ''x'' (x-coordinate in meter), ''y'' (y-Coordinate in meter) and ''theta'' (angle position in rad).

If a function fails due to some reason, it will return an "error tracking object". This is also a ''TrackingObject'', but its marker ID is -1. To check, if a ''TrackingObject'' is an error object, the function ''isErrorTracking'' can be used. With the function ''createErrorTracking'' an error tracking object can be created.

===== Getting TrackingObject from ObjectList =====

To get the ''TrackingObject'' of a specific marker from the ''ObjectList'', the function ''readTracking'' can be used. If the ''ObjectList'' does not contain the marker, this function returns the error tracking object.

To directly check, if a specific marker is contained in a given ''ObjectList'', the function ''isBeingTracked'' can be used. It returns true, if the marker has been tracked, false otherwise.

===== Get tracking data =====

At first the proto type ''ObjectList'' has to be registered for RSB. For this, the function ''registerTracking'' has to be executed.

Afterwards it is important to create the communication with the tracking server. For this the a specific RSB config is needed, which can be generated by calling the function ''getTrackingRSBConfig''. The tracking scope can be got by the function ''getTrackingScope''.

The following functions are using a synchronized queue of RSB to listen to the tracking server. The queue could be initialized for example like that:

<code>
/* Create the tracking listener with scope and tracking RSB config. */
rsb::ListenerPtr trackingListener = factory.createListener(<scope (std::string)>, <tracking config (rsb::ParticipantConfig)>);
/* Create synchronized queue (with size 1 - only the newest tracking data is needed). */
boost::shared_ptr<rsc::threading::SynchronizedQueue<boost::shared_ptr<twbTracking::proto::ObjectList>>>trackingQueue(new rsc::threading::SynchronizedQueue<boost::shared_ptr<twbTracking::proto::ObjectList>>(1));
/* Add the tracking queue to the tracking listener. */
trackingListener->addHandler(rsb::HandlerPtr(new rsb::util::QueuePushHandler<twbTracking::proto::ObjectList>(trackingQueue)));
</code>

The functions ''getNextTrackingObject'' and ''getNextTrackingObjects'' are waiting for new tracking data and then giving their results. For not waiting for too long, the waiting is ranged by the time (in milliseconds) defined by the constant ''TRACKING_TIMEOUT'', which can be modified.

The difference between the functions ''getNextTrackingObject'' and ''getNextTrackingObjects'' is, that ''getNextTrackingObject'' gets a specific marker ID and waits for new tracking data, which contains it, and gives the position of the marker as a ''TrackingObject''. If there wasn't tracking data with the given marker ID within the time defined by ''TRACKING_TIMEOUT'', it returns the error tracking object.

The function ''getNextTrackingObjects'' waits for any tracking data and returns a ''std::vector'' containing ''TrackingObjects'' for each tracked marker. It doesn't check for a specific marker. If there wasn't any tracking data within the time defined by ''TRACKING_TIMEOUT'', it returns a ''std::vector'' containing the error tracking object only.

An example for using this tracking functions is the [[tools:robotTools:twbTrackingCheck:start|twbTrackingCheck tool]].

===== Additional Constants =====

For calculating the correct positions, there are some constants defined:

^ Name ^ Value ^ Description ^
| TRACKING_TO_METER  | 1      | Translates the coordinates to meter. |
| TRACKING_TO_RAD     | pi/180 | Translates the input angle to rad. |
| TRACKING_ANGLE_NORM | 2*pi   | Maximum angle (used for angle normalization). |

The values are set to the current values, which are sent by the tracking server. If there are any changes (or special wishes) the constants can be changed.
